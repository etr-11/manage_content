version: '3.8'

services:
  frontend:
    build:
      context: frontend
      dockerfile: ../Dockerfile.frontend
    ports:
      - "80:80"
    volumes:
      - uploads:/usr/share/nginx/html/uploads
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    depends_on:
      - backend

  backend:
    build:
      context: backend
      dockerfile: ../Dockerfile.backend
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - uploads:/app/uploads
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    depends_on:
      - db
      - redis

  celery:
    build:
      context: backend
      dockerfile: ../Dockerfile.backend
    command: python -m celery -A asyn.file_tasks.celery_app worker --loglevel=info
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - uploads:/app/uploads
    deploy:
      replicas: 1
    depends_on:
      - redis
      - backend

  db:
    image: postgres:16
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=projectsw
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      placement:
        constraints: [node.role == manager]

  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1

volumes:
  postgres_data:
  uploads:

networks:
  default:
    driver: overlay